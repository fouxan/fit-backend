"""add workout models

Revision ID: 88a6b0e55e58
Revises: 525d23801613
Create Date: 2025-08-21 15:30:50.997024

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '88a6b0e55e58'
down_revision = '525d23801613'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('workout_plans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration_weeks', sa.Integer(), nullable=False),
    sa.Column('difficulty', sa.Enum('BEGINNER', 'INTERMEDIATE', 'ADVANCED', name='workoutdifficulty'), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workouts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('difficulty', sa.Enum('BEGINNER', 'INTERMEDIATE', 'ADVANCED', name='workoutdifficulty'), nullable=False),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('calories_burn_estimate', sa.Integer(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_template', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workout_exercises',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workout_id', sa.UUID(), nullable=False),
    sa.Column('exercise_id', sa.UUID(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('sets', sa.Integer(), nullable=False),
    sa.Column('reps', sa.Integer(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('rest_duration', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('rep_scheme', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercise_catalog.id'], ),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workout_plan_workouts',
    sa.Column('workout_plan_id', sa.UUID(), nullable=False),
    sa.Column('workout_id', sa.UUID(), nullable=False),
    sa.Column('week_number', sa.Integer(), nullable=False),
    sa.Column('day_number', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.ForeignKeyConstraint(['workout_plan_id'], ['workout_plans.id'], ),
    sa.PrimaryKeyConstraint('workout_plan_id', 'workout_id')
    )
    op.create_table('workout_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('workout_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='workoutstatus'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('total_duration', sa.Integer(), nullable=True),
    sa.Column('calories_burned', sa.Integer(), nullable=True),
    sa.Column('mood_rating', sa.Integer(), nullable=True),
    sa.Column('difficulty_rating', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('exercise_sets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('workout_session_id', sa.UUID(), nullable=False),
    sa.Column('workout_exercise_id', sa.UUID(), nullable=False),
    sa.Column('set_number', sa.Integer(), nullable=False),
    sa.Column('reps', sa.Integer(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('rpe', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['workout_exercise_id'], ['workout_exercises.id'], ),
    sa.ForeignKeyConstraint(['workout_session_id'], ['workout_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('device_connections', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('device_connections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_device_connections_provider', table_name='device_connections')
    op.drop_index('ix_device_connections_status', table_name='device_connections')
    op.drop_constraint('uq_device_connections_user_provider_device', 'device_connections', type_='unique')
    op.drop_constraint('fk_device_connections_user_id_users', 'device_connections', type_='foreignkey')
    op.create_foreign_key(None, 'device_connections', 'users', ['user_id'], ['id'])
    op.alter_column('equipment', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('equipment', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_catalog', 'is_custom',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'unilateral',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'is_bodyweight',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'supports_gps',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'supports_pool',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'supports_hr',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('exercise_catalog', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_catalog', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_exercise_catalog_external_id', table_name='exercise_catalog', postgresql_where='(external_id IS NOT NULL)')
    op.drop_column('exercise_catalog', 'force')
    op.drop_column('exercise_catalog', 'external_id')
    op.alter_column('exercise_categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_categories', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('exercise_equipment_exercise_id_fkey', 'exercise_equipment', type_='foreignkey')
    op.drop_constraint('exercise_equipment_equipment_id_fkey', 'exercise_equipment', type_='foreignkey')
    op.create_foreign_key(None, 'exercise_equipment', 'equipment', ['equipment_id'], ['id'])
    op.create_foreign_key(None, 'exercise_equipment', 'exercise_catalog', ['exercise_id'], ['id'])
    op.drop_constraint('exercise_muscle_groups_muscle_group_id_fkey', 'exercise_muscle_groups', type_='foreignkey')
    op.drop_constraint('exercise_muscle_groups_exercise_id_fkey', 'exercise_muscle_groups', type_='foreignkey')
    op.create_foreign_key(None, 'exercise_muscle_groups', 'exercise_catalog', ['exercise_id'], ['id'])
    op.create_foreign_key(None, 'exercise_muscle_groups', 'muscle_groups', ['muscle_group_id'], ['id'])
    op.alter_column('movement_patterns', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('movement_patterns', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('muscle_groups', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('muscle_groups', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('plans', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('plans', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_plans_name', table_name='plans')
    op.drop_index('ix_plans_type', table_name='plans')
    op.alter_column('subscriptions', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('subscriptions', 'current_period_start',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('subscriptions', 'current_period_end',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('subscriptions', 'cancel_at_period_end',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('subscriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_subscriptions_active', table_name='subscriptions')
    op.drop_index('ix_subscriptions_plan_id', table_name='subscriptions')
    op.drop_index('ix_subscriptions_user_id', table_name='subscriptions')
    op.drop_constraint('uq_subscriptions_user_active', 'subscriptions', type_='unique')
    op.drop_constraint('fk_subscriptions_user_id_users', 'subscriptions', type_='foreignkey')
    op.drop_constraint('fk_subscriptions_plan_id_plans', 'subscriptions', type_='foreignkey')
    op.create_foreign_key(None, 'subscriptions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'subscriptions', 'plans', ['plan_id'], ['id'])
    op.add_column('users', sa.Column('tz', sa.String(), nullable=True))
    op.add_column('users', sa.Column('units', sa.String(), nullable=True))
    op.add_column('users', sa.Column('locale', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'locale')
    op.drop_column('users', 'units')
    op.drop_column('users', 'tz')
    op.drop_constraint(None, 'subscriptions', type_='foreignkey')
    op.drop_constraint(None, 'subscriptions', type_='foreignkey')
    op.create_foreign_key('fk_subscriptions_plan_id_plans', 'subscriptions', 'plans', ['plan_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key('fk_subscriptions_user_id_users', 'subscriptions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint('uq_subscriptions_user_active', 'subscriptions', ['user_id', 'is_active'])
    op.create_index('ix_subscriptions_user_id', 'subscriptions', ['user_id'], unique=False)
    op.create_index('ix_subscriptions_plan_id', 'subscriptions', ['plan_id'], unique=False)
    op.create_index('ix_subscriptions_active', 'subscriptions', ['is_active'], unique=False)
    op.alter_column('subscriptions', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'cancel_at_period_end',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('subscriptions', 'current_period_end',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('subscriptions', 'current_period_start',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('subscriptions', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.create_index('ix_plans_type', 'plans', ['type'], unique=False)
    op.create_index('ix_plans_name', 'plans', ['name'], unique=False)
    op.alter_column('plans', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('plans', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('muscle_groups', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('muscle_groups', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('movement_patterns', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('movement_patterns', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'exercise_muscle_groups', type_='foreignkey')
    op.drop_constraint(None, 'exercise_muscle_groups', type_='foreignkey')
    op.create_foreign_key('exercise_muscle_groups_exercise_id_fkey', 'exercise_muscle_groups', 'exercise_catalog', ['exercise_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('exercise_muscle_groups_muscle_group_id_fkey', 'exercise_muscle_groups', 'muscle_groups', ['muscle_group_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'exercise_equipment', type_='foreignkey')
    op.drop_constraint(None, 'exercise_equipment', type_='foreignkey')
    op.create_foreign_key('exercise_equipment_equipment_id_fkey', 'exercise_equipment', 'equipment', ['equipment_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('exercise_equipment_exercise_id_fkey', 'exercise_equipment', 'exercise_catalog', ['exercise_id'], ['id'], ondelete='CASCADE')
    op.alter_column('exercise_categories', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('exercise_catalog', sa.Column('external_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('exercise_catalog', sa.Column('force', postgresql.ENUM('static', 'pull', 'push', name='force_enum'), autoincrement=False, nullable=True))
    op.create_index('ix_exercise_catalog_external_id', 'exercise_catalog', ['external_id'], unique=False, postgresql_where='(external_id IS NOT NULL)')
    op.alter_column('exercise_catalog', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_catalog', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('exercise_catalog', 'supports_hr',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('exercise_catalog', 'supports_pool',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'supports_gps',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'is_bodyweight',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'unilateral',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('exercise_catalog', 'is_custom',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('equipment', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('equipment', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'device_connections', type_='foreignkey')
    op.create_foreign_key('fk_device_connections_user_id_users', 'device_connections', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint('uq_device_connections_user_provider_device', 'device_connections', ['user_id', 'provider', 'device_id'])
    op.create_index('ix_device_connections_status', 'device_connections', ['status'], unique=False)
    op.create_index('ix_device_connections_provider', 'device_connections', ['provider'], unique=False)
    op.alter_column('device_connections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('device_connections', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_table('exercise_sets')
    op.drop_table('workout_sessions')
    op.drop_table('workout_plan_workouts')
    op.drop_table('workout_exercises')
    op.drop_table('workouts')
    op.drop_table('workout_plans')
    # ### end Alembic commands ###
